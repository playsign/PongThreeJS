THREE.OBJLoader=function(manager){this.manager=void 0!==manager?manager:THREE.DefaultLoadingManager},THREE.OBJLoader.prototype={constructor:THREE.OBJLoader,load:function(url,onLoad){var scope=this,loader=new THREE.XHRLoader(scope.manager);loader.setCrossOrigin(this.crossOrigin),loader.load(url,function(text){onLoad(scope.parse(text))})},parse:function(text){function vector(x,y,z){return new THREE.Vector3(x,y,z)}function uv(u,v){return new THREE.Vector2(u,v)}function face3(a,b,c,normals){return new THREE.Face3(a,b,c,normals)}var geometry,material,mesh,object=new THREE.Object3D;/^o /gm.test(text)===!1&&(geometry=new THREE.Geometry,material=new THREE.MeshLambertMaterial,mesh=new THREE.Mesh(geometry,material),object.add(mesh));for(var vertices=[],verticesCount=0,normals=[],uvs=[],vertex_pattern=/v( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)/,normal_pattern=/vn( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)/,uv_pattern=/vt( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)/,face_pattern1=/f( +\d+)( +\d+)( +\d+)( +\d+)?/,face_pattern2=/f( +(\d+)\/(\d+))( +(\d+)\/(\d+))( +(\d+)\/(\d+))( +(\d+)\/(\d+))?/,face_pattern3=/f( +(\d+)\/(\d+)\/(\d+))( +(\d+)\/(\d+)\/(\d+))( +(\d+)\/(\d+)\/(\d+))( +(\d+)\/(\d+)\/(\d+))?/,face_pattern4=/f( +(\d+)\/\/(\d+))( +(\d+)\/\/(\d+))( +(\d+)\/\/(\d+))( +(\d+)\/\/(\d+))?/,lines=text.split("\n"),i=0;i<lines.length;i++){var line=lines[i];line=line.trim();var result;0!==line.length&&"#"!==line.charAt(0)&&(null!==(result=vertex_pattern.exec(line))?vertices.push(vector(parseFloat(result[1]),parseFloat(result[2]),parseFloat(result[3]))):null!==(result=normal_pattern.exec(line))?normals.push(vector(parseFloat(result[1]),parseFloat(result[2]),parseFloat(result[3]))):null!==(result=uv_pattern.exec(line))?uvs.push(uv(parseFloat(result[1]),parseFloat(result[2]))):null!==(result=face_pattern1.exec(line))?void 0===result[4]?(geometry.vertices.push(vertices[parseInt(result[1])-1],vertices[parseInt(result[2])-1],vertices[parseInt(result[3])-1]),geometry.faces.push(face3(verticesCount++,verticesCount++,verticesCount++))):(geometry.vertices.push(vertices[parseInt(result[1])-1],vertices[parseInt(result[2])-1],vertices[parseInt(result[3])-1],vertices[parseInt(result[4])-1]),geometry.faces.push(face3(verticesCount,verticesCount+1,verticesCount+3)),geometry.faces.push(face3(verticesCount+1,verticesCount+2,verticesCount+3)),verticesCount+=4):null!==(result=face_pattern2.exec(line))?void 0===result[10]?(geometry.vertices.push(vertices[parseInt(result[2])-1],vertices[parseInt(result[5])-1],vertices[parseInt(result[8])-1]),geometry.faces.push(face3(verticesCount++,verticesCount++,verticesCount++)),geometry.faceVertexUvs[0].push([uvs[parseInt(result[3])-1],uvs[parseInt(result[6])-1],uvs[parseInt(result[9])-1]])):(geometry.vertices.push(vertices[parseInt(result[2])-1],vertices[parseInt(result[5])-1],vertices[parseInt(result[8])-1],vertices[parseInt(result[11])-1]),geometry.faces.push(face3(verticesCount,verticesCount+1,verticesCount+3)),geometry.faceVertexUvs[0].push([uvs[parseInt(result[3])-1],uvs[parseInt(result[6])-1],uvs[parseInt(result[12])-1]]),geometry.faces.push(face3(verticesCount+1,verticesCount+2,verticesCount+3)),geometry.faceVertexUvs[0].push([uvs[parseInt(result[6])-1],uvs[parseInt(result[9])-1],uvs[parseInt(result[12])-1]]),verticesCount+=4):null!==(result=face_pattern3.exec(line))?void 0===result[13]?(geometry.vertices.push(vertices[parseInt(result[2])-1],vertices[parseInt(result[6])-1],vertices[parseInt(result[10])-1]),geometry.faces.push(face3(verticesCount++,verticesCount++,verticesCount++,[normals[parseInt(result[4])-1],normals[parseInt(result[8])-1],normals[parseInt(result[12])-1]])),geometry.faceVertexUvs[0].push([uvs[parseInt(result[3])-1],uvs[parseInt(result[7])-1],uvs[parseInt(result[11])-1]])):(geometry.vertices.push(vertices[parseInt(result[2])-1],vertices[parseInt(result[6])-1],vertices[parseInt(result[10])-1],vertices[parseInt(result[14])-1]),geometry.faces.push(face3(verticesCount,verticesCount+1,verticesCount+3,[normals[parseInt(result[4])-1],normals[parseInt(result[8])-1],normals[parseInt(result[16])-1]])),geometry.faceVertexUvs[0].push([uvs[parseInt(result[3])-1],uvs[parseInt(result[7])-1],uvs[parseInt(result[15])-1]]),geometry.faces.push(face3(verticesCount+1,verticesCount+2,verticesCount+3,[normals[parseInt(result[8])-1],normals[parseInt(result[12])-1],normals[parseInt(result[16])-1]])),geometry.faceVertexUvs[0].push([uvs[parseInt(result[7])-1],uvs[parseInt(result[11])-1],uvs[parseInt(result[15])-1]]),verticesCount+=4):null!==(result=face_pattern4.exec(line))?void 0===result[10]?(geometry.vertices.push(vertices[parseInt(result[2])-1],vertices[parseInt(result[5])-1],vertices[parseInt(result[8])-1]),geometry.faces.push(face3(verticesCount++,verticesCount++,verticesCount++,[normals[parseInt(result[3])-1],normals[parseInt(result[6])-1],normals[parseInt(result[9])-1]]))):(geometry.vertices.push(vertices[parseInt(result[2])-1],vertices[parseInt(result[5])-1],vertices[parseInt(result[8])-1],vertices[parseInt(result[11])-1]),geometry.faces.push(face3(verticesCount,verticesCount+1,verticesCount+3,[normals[parseInt(result[3])-1],normals[parseInt(result[6])-1],normals[parseInt(result[12])-1]])),geometry.faces.push(face3(verticesCount+1,verticesCount+2,verticesCount+3,[normals[parseInt(result[6])-1],normals[parseInt(result[9])-1],normals[parseInt(result[12])-1]])),verticesCount+=4):/^o /.test(line)?(geometry=new THREE.Geometry,material=new THREE.MeshLambertMaterial,mesh=new THREE.Mesh(geometry,material),mesh.name=line.substring(2).trim(),object.add(mesh),verticesCount=0):/^g /.test(line)||(/^usemtl /.test(line)?material.name=line.substring(7).trim():/^mtllib /.test(line)||/^s /.test(line)))}for(var i=0,l=object.children.length;l>i;i++){var geometry=object.children[i].geometry;geometry.computeCentroids(),geometry.computeFaceNormals(),geometry.computeBoundingSphere()}return object}};