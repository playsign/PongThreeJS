/*! loglevel - v0.5.0 - https://github.com/pimterry/loglevel - (c) 2013 Tim Perry - licensed MIT */
!function(undefined){var undefinedType="undefined";!function(name,definition){"undefined"!=typeof module?module.exports=definition():"function"==typeof define&&"object"==typeof define.amd?define("lib/loglevel",definition):this[name]=definition()}("log",function(){function realMethod(methodName){return typeof console===undefinedType?noop:console[methodName]===undefined?console.log!==undefined?boundToConsole(console,"log"):noop:boundToConsole(console,methodName)}function boundToConsole(console,methodName){var method=console[methodName];if(method.bind!==undefined)return console[methodName].bind(console);if(Function.prototype.bind===undefined)return functionBindingWrapper(method,console);try{return Function.prototype.bind.call(console[methodName],console)}catch(e){return functionBindingWrapper(method,console)}}function functionBindingWrapper(f,context){return function(){Function.prototype.apply.apply(f,[context,arguments])}}function replaceLoggingMethods(methodFactory){for(var ii=0;ii<logMethods.length;ii++)self[logMethods[ii]]=methodFactory(logMethods[ii])}function cookiesAvailable(){return typeof window!==undefinedType&&window.document!==undefined&&window.document.cookie!==undefined}function localStorageAvailable(){try{return typeof window!==undefinedType&&window.localStorage!==undefined}catch(e){return!1}}function persistLevelIfPossible(levelNum){var levelName;for(var key in self.levels)if(self.levels.hasOwnProperty(key)&&self.levels[key]===levelNum){levelName=key;break}if(localStorageAvailable())window.localStorage.loglevel=levelName;else{if(!cookiesAvailable())return;window.document.cookie="loglevel="+levelName+";"}}function loadPersistedLevel(){var storedLevel;if(localStorageAvailable()&&(storedLevel=window.localStorage.loglevel),!storedLevel&&cookiesAvailable()){var cookieMatch=cookieRegex.exec(window.document.cookie)||[];storedLevel=cookieMatch[1]}self.setLevel(self.levels[storedLevel]||self.levels.WARN)}var self={},noop=function(){},logMethods=["trace","debug","info","warn","error"],cookieRegex=/loglevel=([^;]+)/;return self.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},self.setLevel=function(level){if("number"==typeof level&&level>=0&&level<=self.levels.SILENT){if(persistLevelIfPossible(level),level===self.levels.SILENT)return void replaceLoggingMethods(function(){return noop});if(typeof console===undefinedType)return replaceLoggingMethods(function(methodName){return function(){typeof console!==undefinedType&&(self.setLevel(level),self[methodName].apply(self,arguments))}}),"No console available for logging";replaceLoggingMethods(function(methodName){return level<=self.levels[methodName.toUpperCase()]?realMethod(methodName):noop})}else{if("string"!=typeof level||self.levels[level.toUpperCase()]===undefined)throw"log.setLevel() called with invalid level: "+level;self.setLevel(self.levels[level.toUpperCase()])}},self.enableAll=function(){self.setLevel(self.levels.TRACE)},self.disableAll=function(){self.setLevel(self.levels.SILENT)},loadPersistedLevel(),self})}();